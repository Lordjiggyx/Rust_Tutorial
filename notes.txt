Why Use Rust?

Rust is a statically and strongly typed systems programming language. statically means that all types are known at compile-time, strongly means that these types are designed to make it harder to write incorrect programs.

The big difference from C and C++ is that Rust is safe by default; all memory accesses are checked. It is not possible to corrupt memory by accident.

The unifying principles behind Rust are:

strictly enforcing safe borrowing of data
functions, methods and closures to operate on data
tuples, structs and enums to aggregate data
pattern matching to select and destructure data
traits to define behaviour on data


Setup

First you need to install rust it is ideal to have homebrew installed to tun the brew, to do this open the terminal and run the following commands

in the terminal run the following : brew install rustup

After you run this command you can install the compiler and package manager

rustup-init

**When you run this command select option 1***

To verify the installation run the command: rustc —-version

To enable use of rust in vscode we have to use the RLS (rust language server)

download the rust extension this will contain the RLS

you then need to check if you have cargo which is rusts package manager

cargo --version

--First Project--

Using rusts package manager we will create a simple hello world Project

to do this cd into the desired folder and run 

cargo new [project_name]

A folder and a file called main.rs should be created 

to run a rust project you must use the following commands **In the folder where the project is**

cargo build
cargo run


--BASICS--

Functions in rust are defined using the word "fn" and "main" is a predefined function that acts as the entry point of a prohram


A macros are extended versions of functions they're names end with an exclamation mark, they provide runtime features

Comments are a way to improve the readability of a program. Comments can be used to include additional information about a program like author of the code, hints about a function/ construct, etc. The compiler ignores comments.

Rust supports the following types of comments −

Single-line comments ( // ) − Any text between a // and the end of a line is treated as a comment

Multi-line comments (/* */) − These comments may span multiple lines.

every line ends with a semi colon

-VARIABLES-
Use the let keyword to declare a variable.

The Type System represents the different types of values supported by the language. The Type System checks validity of the supplied values, before they are stored or manipulated by the program. 

Rust is a statically typed language. Every value in Rust is of a certain data type. The compiler can automatically infer data type of the variable based on the value assigned to it. so you dibt need to actually determine the calue 

There are 4 main data types
stringformatfloat
boolean
unicode character

-Scalar Types-

Rust has 4 scalar types this is used to show a single value e.g 10,3,c

These 4 are 

Integer
Floating-point
Booleans
Characters

-Integer-

An integer is a number without a fractional component. Simply put, the integer data type is used to represent whole numbers.

Integers can be further classified as Signed and Unsigned. Signed integers can store both negative and positive values. Unsigned integers can only store positive values. A detailed description if integer types is given below

Most integeres are i32 e.g 32bit postive and negative values 

